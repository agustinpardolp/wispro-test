{"ast":null,"code":"var _jsxFileName = \"/Users/agustinpardo/Desktop/challenge-wispro/Client/src/components/Button/index.jsx\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { StyledButton } from \"./styled-components\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Button({\n  onClick,\n  label,\n  variant,\n  type\n}) {\n  const handleVariant = variant => {\n    let settings = {\n      borderColor: \"var(--primary)\",\n      fontColor: \"white\",\n      backgroundColor: \"var(--primary)\",\n      disabled: false\n    };\n\n    switch (variant) {\n      case \"confirm\":\n        settings = {\n          borderColor: \"var(--primaryConfirm)\",\n          fontColor: \"white\",\n          backgroundColor: \"var(--primaryConfirm)\",\n          disabled: false\n        };\n        break;\n\n      case \"cancel\":\n        settings = {\n          borderColor: \"var(--primaryCancel)\",\n          fontColor: \"white\",\n          backgroundColor: \"var(--primaryCancel)\",\n          disabled: false\n        };\n        break;\n\n      case \"neutral\":\n        settings = {\n          borderColor: \"var(--primary)\",\n          fontColor: \"white\",\n          backgroundColor: \"none\",\n          disabled: false\n        };\n        break;\n\n      case \"disabled\":\n        settings = {\n          borderColor: \"var(--primaryInputBorder)\",\n          fontColor: \"white\",\n          disabled: true,\n          backgroundColor: \"var(--primaryInputBorder)\"\n        };\n        break;\n\n      case \"login\":\n        settings = {\n          borderColor: \"var(--primary)\",\n          fontColor: \"var(--primary)\",\n          backgroundColor: \"white\",\n          disabled: false\n        };\n        break;\n\n      case \"logout\":\n        settings = {\n          borderColor: \"var(--primaryInputBorder)\",\n          fontColor: \"var(--primaryInputBorder)\",\n          backgroundColor: \"white\",\n          disabled: false\n        };\n        break;\n\n      default:\n        return settings;\n    }\n\n    return settings;\n  };\n\n  let buttonSetup = handleVariant(variant);\n  return /*#__PURE__*/_jsxDEV(StyledButton, {\n    onClick: onClick,\n    borderColor: buttonSetup.borderColor,\n    fontColor: buttonSetup.fontColor,\n    backgroundColor: buttonSetup.backgroundColor,\n    type: type,\n    disabled: buttonSetup.disabled,\n    children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n      id: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Button;\nButton.propTypes = {\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf([\"confirm\", \"cancel\", \"neutral\", \"disabled\", \"login\", \"logout\"]),\n  type: PropTypes.oneOf([\"text\", \"submit\"])\n};\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/Client/src/components/Button/index.jsx"],"names":["React","FormattedMessage","StyledButton","PropTypes","Button","onClick","label","variant","type","handleVariant","settings","borderColor","fontColor","backgroundColor","disabled","buttonSetup","propTypes","string","func","oneOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { StyledButton } from \"./styled-components\";\nimport PropTypes from \"prop-types\";\n\nfunction Button({ onClick, label, variant, type }) {\n  const handleVariant = (variant) => {\n    let settings = {\n      borderColor: \"var(--primary)\",\n      fontColor: \"white\",\n      backgroundColor: \"var(--primary)\",\n      disabled: false,\n    };\n    switch (variant) {\n      case \"confirm\":\n        settings = {\n          borderColor: \"var(--primaryConfirm)\",\n          fontColor: \"white\",\n          backgroundColor: \"var(--primaryConfirm)\",\n          disabled: false,\n        };\n        break;\n      case \"cancel\":\n        settings = {\n          borderColor: \"var(--primaryCancel)\",\n          fontColor: \"white\",\n          backgroundColor: \"var(--primaryCancel)\",\n          disabled: false,\n        };\n        break;\n      case \"neutral\":\n        settings = {\n          borderColor: \"var(--primary)\",\n          fontColor: \"white\",\n          backgroundColor: \"none\",\n          disabled: false,\n        };\n        break;\n      case \"disabled\":\n        settings = {\n          borderColor: \"var(--primaryInputBorder)\",\n          fontColor: \"white\",\n          disabled: true,\n          backgroundColor: \"var(--primaryInputBorder)\",\n        };\n        break;\n      case \"login\":\n        settings = {\n          borderColor: \"var(--primary)\",\n          fontColor: \"var(--primary)\",\n          backgroundColor: \"white\",\n          disabled: false,\n        };\n        break;\n      case \"logout\":\n        settings = {\n          borderColor: \"var(--primaryInputBorder)\",\n          fontColor: \"var(--primaryInputBorder)\",\n          backgroundColor: \"white\",\n          disabled: false,\n        };\n        break;\n      default:\n        return settings;\n    }\n\n    return settings;\n  };\n  let buttonSetup = handleVariant(variant);\n  return (\n    <StyledButton\n      onClick={onClick}\n      borderColor={buttonSetup.borderColor}\n      fontColor={buttonSetup.fontColor}\n      backgroundColor={buttonSetup.backgroundColor}\n      type={type}\n      disabled={buttonSetup.disabled}\n    >\n      <FormattedMessage id={label} />\n    </StyledButton>\n  );\n}\n\nButton.propTypes = {\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf([\n    \"confirm\",\n    \"cancel\",\n    \"neutral\",\n    \"disabled\",\n    \"login\",\n    \"logout\",\n  ]),\n  type: PropTypes.oneOf([\"text\", \"submit\"]),\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}