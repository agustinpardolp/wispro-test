{"ast":null,"code":"import { withFormik } from \"formik\";\nimport { connect } from \"react-redux\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../constants\";\nimport { login } from \"../../store/actions/loginActions\";\nimport LoginForm from \"./components/Form\";\nimport users from \"../../store/actions/loginActions/types\";\nconst validationSchema = yup.object().shape({\n  email: yup.string().trim().matches(REGEX.EMAIL_REGEX_SCHEMA, \"Datos faltantes o incorrectos\").max(30).required(\" \"),\n  password: yup.string().trim().matches(REGEX.NUMERIC_PASSWORD, \"Tipo de dato incorrecto\").min(6, \"Password debe contener al menos 6 caracteres\").max(6, \"Password debe contener al menos 6 caracteres\").required(\" \"),\n  rememberUser: yup.bool()\n}); //formik validations\n\nconst Login = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema,\n  mapPropsToValues: ({\n    email,\n    password,\n    rememberUser\n  }) => ({\n    email: email || \"\",\n    password: password || \"\",\n    rememberUser: rememberUser || false\n  }),\n  handleSubmit: (value, {\n    props,\n    setErrors\n  }) => {\n    props.login(value).then(res => {\n      let {\n        type\n      } = res;\n\n      if (type === users.LOGIN_USER_SUCCESS) {\n        props.history.push(`/users`);\n      } else {\n        setErrors(\"ocurrio un error al iniciar sesión\");\n      }\n    });\n  }\n})(LoginForm);\nconst mapDispatchToProps = {\n  login\n};\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/Client/src/views/Login/index.jsx"],"names":["withFormik","connect","yup","REGEX","login","LoginForm","users","validationSchema","object","shape","email","string","trim","matches","EMAIL_REGEX_SCHEMA","max","required","password","NUMERIC_PASSWORD","min","rememberUser","bool","Login","validateOnChange","enableReinitialize","mapPropsToValues","handleSubmit","value","props","setErrors","then","res","type","LOGIN_USER_SUCCESS","history","push","mapDispatchToProps"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AAEA,MAAMC,gBAAgB,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,KAAK,EAAER,GAAG,CACPS,MADI,GAEJC,IAFI,GAGJC,OAHI,CAGIV,KAAK,CAACW,kBAHV,EAG8B,+BAH9B,EAIJC,GAJI,CAIA,EAJA,EAKJC,QALI,CAKK,GALL,CADmC;AAO1CC,EAAAA,QAAQ,EAAEf,GAAG,CACVS,MADO,GAEPC,IAFO,GAGPC,OAHO,CAGCV,KAAK,CAACe,gBAHP,EAGyB,yBAHzB,EAIPC,GAJO,CAIH,CAJG,EAIA,8CAJA,EAKPJ,GALO,CAKH,CALG,EAKA,8CALA,EAMPC,QANO,CAME,GANF,CAPgC;AAc1CI,EAAAA,YAAY,EAAElB,GAAG,CAACmB,IAAJ;AAd4B,CAAnB,CAAzB,C,CAgBA;;AACA,MAAMC,KAAK,GAAGtB,UAAU,CAAC;AACvBuB,EAAAA,gBAAgB,EAAE,IADK;AAEvBC,EAAAA,kBAAkB,EAAE,KAFG;AAGvBjB,EAAAA,gBAHuB;AAIvBkB,EAAAA,gBAAgB,EAAE,CAAC;AAAEf,IAAAA,KAAF;AAASO,IAAAA,QAAT;AAAmBG,IAAAA;AAAnB,GAAD,MAAwC;AACxDV,IAAAA,KAAK,EAAEA,KAAK,IAAI,EADwC;AAExDO,IAAAA,QAAQ,EAAEA,QAAQ,IAAI,EAFkC;AAGxDG,IAAAA,YAAY,EAAEA,YAAY,IAAI;AAH0B,GAAxC,CAJK;AASvBM,EAAAA,YAAY,EAAE,CAACC,KAAD,EAAQ;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAR,KAAiC;AAE7CD,IAAAA,KAAK,CAACxB,KAAN,CAAYuB,KAAZ,EAAmBG,IAAnB,CAAyBC,GAAD,IAAS;AAC/B,UAAI;AAAEC,QAAAA;AAAF,UAAWD,GAAf;;AACA,UAAIC,IAAI,KAAK1B,KAAK,CAAC2B,kBAAnB,EAAuC;AACnCL,QAAAA,KAAK,CAACM,OAAN,CAAcC,IAAd,CAAoB,QAApB;AACH,OAFD,MAEO;AACLN,QAAAA,SAAS,CAAC,oCAAD,CAAT;AACD;AACF,KAPD;AAQD;AAnBsB,CAAD,CAAV,CAoBXxB,SApBW,CAAd;AAsBA,MAAM+B,kBAAkB,GAAG;AACzBhC,EAAAA;AADyB,CAA3B;AAIA,eAAeH,OAAO,CAAC,IAAD,EAAOmC,kBAAP,CAAP,CAAkCd,KAAlC,CAAf","sourcesContent":["import { withFormik } from \"formik\";\nimport { connect } from \"react-redux\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../constants\";\nimport { login } from \"../../store/actions/loginActions\";\nimport LoginForm from \"./components/Form\";\nimport users from \"../../store/actions/loginActions/types\";\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .trim()\n    .matches(REGEX.EMAIL_REGEX_SCHEMA, \"Datos faltantes o incorrectos\")\n    .max(30)\n    .required(\" \"),\n  password: yup\n    .string()\n    .trim()\n    .matches(REGEX.NUMERIC_PASSWORD, \"Tipo de dato incorrecto\")\n    .min(6, \"Password debe contener al menos 6 caracteres\")\n    .max(6, \"Password debe contener al menos 6 caracteres\")\n    .required(\" \"),\n  rememberUser: yup.bool(),\n});\n//formik validations\nconst Login = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema,\n  mapPropsToValues: ({ email, password, rememberUser }) => ({\n    email: email || \"\",\n    password: password || \"\",\n    rememberUser: rememberUser || false,\n  }),\n  handleSubmit: (value, { props, setErrors }) => {\n    \n    props.login(value).then((res) => {\n      let { type } = res;\n      if (type === users.LOGIN_USER_SUCCESS) {\n          props.history.push(`/users`);\n      } else {\n        setErrors(\"ocurrio un error al iniciar sesión\");\n      }\n    });\n  },\n})(LoginForm);\n\nconst mapDispatchToProps = {\n  login,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}