{"ast":null,"code":"var _jsxFileName = \"/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/Users/screens/EditUser/index.jsx\";\nimport { withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../../../constants\";\nimport EditUserForm from \"./component/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object().shape({\n  email: yup.string().trim().matches(REGEX.EMAIL_REGEX_SCHEMA, /*#__PURE__*/_jsxDEV(FormattedMessage, {\n    id: \"userEdition.email\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 40\n  }, this)).max(30).required(\" \"),\n  name: yup.string().trim().matches(REGEX.NAME_REGEX, \"userEdition.nameError\").required(\"userEdition.nameRequired\"),\n  surname: yup.string().trim().matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\").required(\"userEdition.surnameRequired\"),\n  address: yup.string().trim().required(\"userEdition.addressRequired\"),\n  dni: yup.number() // .trim()\n  // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n  // .required(\"userEdition.dniRequired\"),\n\n}); //formik validations\n\nconst EditUser = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema,\n  mapPropsToValues: ({\n    data\n  }) => ({\n    email: data.email || \"\",\n    name: data.name || \"\",\n    surname: data.surname || \"\",\n    address: data.address || \"\",\n    dni: data.dni || \"\"\n  }),\n  handleSubmit: (value, {\n    props,\n    setErrors\n  }) => {\n    const {\n      data: {\n        dni\n      }\n    } = props;\n    props.handleAsyncConfirm(dni, value).then(res => {\n      props.posResponse();\n      props.onClose({\n        type: \"hide\"\n      });\n    });\n  }\n})(EditUserForm);\nexport default EditUser;","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/Users/screens/EditUser/index.jsx"],"names":["withFormik","yup","REGEX","EditUserForm","FormattedMessage","validationSchema","object","shape","email","string","trim","matches","EMAIL_REGEX_SCHEMA","max","required","name","NAME_REGEX","surname","SURNAME_REGEX","address","dni","number","EditUser","validateOnChange","enableReinitialize","mapPropsToValues","data","handleSubmit","value","props","setErrors","handleAsyncConfirm","then","res","posResponse","onClose","type"],"mappings":";AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAAQC,gBAAR,QAA+B,YAA/B;;AACA,MAAMC,gBAAgB,GAAGJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,KAAK,EAAEP,GAAG,CACPQ,MADI,GAEJC,IAFI,GAGJC,OAHI,CAGIT,KAAK,CAACU,kBAHV,eAG8B,QAAC,gBAAD;AAAkB,IAAA,EAAE,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,UAH9B,EAIJC,GAJI,CAIA,EAJA,EAKJC,QALI,CAKK,GALL,CADmC;AAO1CC,EAAAA,IAAI,EAAEd,GAAG,CACNQ,MADG,GAEHC,IAFG,GAGHC,OAHG,CAGKT,KAAK,CAACc,UAHX,EAGuB,uBAHvB,EAIHF,QAJG,CAIM,0BAJN,CAPoC;AAY1CG,EAAAA,OAAO,EAAEhB,GAAG,CACTQ,MADM,GAENC,IAFM,GAGNC,OAHM,CAGET,KAAK,CAACgB,aAHR,EAGuB,0BAHvB,EAINJ,QAJM,CAIG,6BAJH,CAZiC;AAiB1CK,EAAAA,OAAO,EAAElB,GAAG,CAACQ,MAAJ,GAAaC,IAAb,GAAoBI,QAApB,CAA6B,6BAA7B,CAjBiC;AAkB1CM,EAAAA,GAAG,EAAEnB,GAAG,CACLoB,MADE,EAlBqC,CAoBxC;AACA;AACA;;AAtBwC,CAAnB,CAAzB,C,CAyBA;;AACA,MAAMC,QAAQ,GAAGtB,UAAU,CAAC;AAC1BuB,EAAAA,gBAAgB,EAAE,IADQ;AAE1BC,EAAAA,kBAAkB,EAAE,KAFM;AAG1BnB,EAAAA,gBAH0B;AAI1BoB,EAAAA,gBAAgB,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,MAAe;AAC/BlB,IAAAA,KAAK,EAAEkB,IAAI,CAAClB,KAAL,IAAc,EADU;AAE/BO,IAAAA,IAAI,EAAEW,IAAI,CAACX,IAAL,IAAa,EAFY;AAG/BE,IAAAA,OAAO,EAAES,IAAI,CAACT,OAAL,IAAgB,EAHM;AAI/BE,IAAAA,OAAO,EAAEO,IAAI,CAACP,OAAL,IAAgB,EAJM;AAK/BC,IAAAA,GAAG,EAAEM,IAAI,CAACN,GAAL,IAAY;AALc,GAAf,CAJQ;AAW1BO,EAAAA,YAAY,EAAE,CAACC,KAAD,EAAQ;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAR,KAAiC;AAC7C,UAAM;AACJJ,MAAAA,IAAI,EAAE;AAAEN,QAAAA;AAAF;AADF,QAEFS,KAFJ;AAGAA,IAAAA,KAAK,CAACE,kBAAN,CAAyBX,GAAzB,EAA8BQ,KAA9B,EAAqCI,IAArC,CAA2CC,GAAD,IAAS;AACjDJ,MAAAA,KAAK,CAACK,WAAN;AACAL,MAAAA,KAAK,CAACM,OAAN,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAHD;AAID;AAnByB,CAAD,CAAV,CAoBdjC,YApBc,CAAjB;AAsBA,eAAemB,QAAf","sourcesContent":["import { withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../../../constants\";\nimport EditUserForm from \"./component/Form\";\nimport {FormattedMessage} from \"react-intl\";\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .trim()\n    .matches(REGEX.EMAIL_REGEX_SCHEMA, <FormattedMessage id={\"userEdition.email\"} />)\n    .max(30)\n    .required(\" \"),\n  name: yup\n    .string()\n    .trim()\n    .matches(REGEX.NAME_REGEX, \"userEdition.nameError\")\n    .required(\"userEdition.nameRequired\"),\n  surname: yup\n    .string()\n    .trim()\n    .matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\")\n    .required(\"userEdition.surnameRequired\"),\n  address: yup.string().trim().required(\"userEdition.addressRequired\"),\n  dni: yup\n    .number()\n    // .trim()\n    // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n    // .required(\"userEdition.dniRequired\"),\n});\n\n//formik validations\nconst EditUser = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema,\n  mapPropsToValues: ({ data }) => ({\n    email: data.email || \"\",\n    name: data.name || \"\",\n    surname: data.surname || \"\",\n    address: data.address || \"\",\n    dni: data.dni || \"\",\n  }),\n  handleSubmit: (value, { props, setErrors }) => {\n    const {\n      data: { dni },\n    } = props;\n    props.handleAsyncConfirm(dni, value).then((res) => {\n      props.posResponse();\n      props.onClose({ type: \"hide\" });\n    });\n  },\n})(EditUserForm);\n\nexport default EditUser;\n"]},"metadata":{},"sourceType":"module"}