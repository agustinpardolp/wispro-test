{"ast":null,"code":"var _jsxFileName = \"/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/System/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { io } from \"socket.io-client\";\nimport { FormattedMessage } from \"react-intl\";\nimport { moment } from \"moment\";\nimport { StyledChartContainer, StyledMainContainer, StyledValue } from \"./styled-components\";\nimport BarChart from \"./components/BarChart\";\nimport SystemLineChart from \"./components/SystemLineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst connectionOptions = {\n  \"force new connection\": true,\n  reconnectionAttempts: \"Infinity\",\n  //avoid having user reconnect manually in order to prevent dead clients after a server restart\n  timeout: 10000,\n  //before connect_error and connect_timeout are emitted.\n  transports: [\"websocket\"]\n};\n\nconst System = () => {\n  _s();\n\n  const intl = useIntl();\n  const [memory, setMemory] = useState(\"\");\n  const [cpu, setCpu] = useState(\"\");\n  const [disk, setDisk] = useState(\"\");\n  const [network, setNetwork] = useState([]);\n  const [seconds, setSeconds] = useState([]);\n  useEffect(() => {\n    const socket = io(\"http://localhost:4000\", connectionOptions);\n    socket.on(\"connection\");\n    socket.on(\"cpu\", data => {\n      setCpu(data);\n    });\n\n    const randomGenrator = value => {\n      return value * Math.round(Math.random() * 5);\n    };\n\n    socket.on(\"memory\", data => {\n      let memory = randomGenrator(data);\n      setMemory(memory);\n    });\n    socket.on(\"disk\", data => {\n      setDisk(data);\n    });\n    socket.on(\"seconds\", data => {\n      let transformArray = [`${data} sec`, `${data + 1} sec`, `${data + 2} sec`, `${data + 3} sec`];\n      setSeconds(transformArray);\n    });\n    socket.on(\"network\", data => {\n      let networkFirst = randomGenrator(data);\n      let networkSecond = randomGenrator(data);\n      let networkThird = randomGenrator(data);\n      let networkDataArray = [networkFirst, networkThird, networkSecond, networkThird];\n      setNetwork(networkDataArray);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const DataUsage = {\n    labelsDataUsage: seconds,\n    barColor: \"rgba(255, 99, 132, 0.2)\",\n    title: \"barChartDatatUsage.title\",\n    borderColor: \"rgba(255, 99, 132, 1)\"\n  };\n  const DataMemoryUsage = {\n    labelsDataUsage: [intl.formatMessage({\n      id: \"barChartMemoryUsage.title\"\n    }), intl.formatMessage({\n      id: \"barChartDiskUsage.title\"\n    })],\n    barColor: \"rgba(54, 162, 235, 0.2)\",\n    title: \"barChartMemoryUsage.title\",\n    borderColor: \"rgba(54, 162, 235, 1)\"\n  };\n  return /*#__PURE__*/_jsxDEV(StyledMainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(StyledChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"barChartCpuUsage.title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledValue, {\n        children: [cpu, \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartContainer, {\n      children: /*#__PURE__*/_jsxDEV(SystemLineChart, {\n        labels: DataUsage.labelsDataUsage,\n        title: DataUsage.title,\n        barColor: DataUsage.barColor,\n        borderColor: DataUsage.borderColor,\n        values: network\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartContainer, {\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        labels: DataMemoryUsage.labelsDataUsage,\n        title: DataMemoryUsage.title,\n        barColor: DataMemoryUsage.barColor,\n        borderColor: DataMemoryUsage.borderColor,\n        values: [memory, disk]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(System, \"5GdFh8JfHTwBRyFblQ6UpCxSnPg=\", false, function () {\n  return [useIntl];\n});\n\n_c = System;\nexport default System;\n\nvar _c;\n\n$RefreshReg$(_c, \"System\");","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/System/index.jsx"],"names":["React","useEffect","useState","useIntl","io","FormattedMessage","moment","StyledChartContainer","StyledMainContainer","StyledValue","BarChart","SystemLineChart","connectionOptions","reconnectionAttempts","timeout","transports","System","intl","memory","setMemory","cpu","setCpu","disk","setDisk","network","setNetwork","seconds","setSeconds","socket","on","data","randomGenrator","value","Math","round","random","transformArray","networkFirst","networkSecond","networkThird","networkDataArray","disconnect","DataUsage","labelsDataUsage","barColor","title","borderColor","DataMemoryUsage","formatMessage","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,qBAJP;AAKA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;AAEA,MAAMC,iBAAiB,GAAG;AACxB,0BAAwB,IADA;AAExBC,EAAAA,oBAAoB,EAAE,UAFE;AAEU;AAClCC,EAAAA,OAAO,EAAE,KAHe;AAGR;AAChBC,EAAAA,UAAU,EAAE,CAAC,WAAD;AAJY,CAA1B;;AAOA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAMC,IAAI,GAAGd,OAAO,EAApB;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACkB,GAAD,EAAMC,MAAN,IAAgBnB,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,MAAM,GAAGxB,EAAE,CAAC,uBAAD,EAA0BQ,iBAA1B,CAAjB;AACAgB,IAAAA,MAAM,CAACC,EAAP,CAAU,YAAV;AACAD,IAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAkBC,IAAD,IAAU;AACzBT,MAAAA,MAAM,CAACS,IAAD,CAAN;AACD,KAFD;;AAGA,UAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,aAAOA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAf;AACD,KAFD;;AAGAP,IAAAA,MAAM,CAACC,EAAP,CAAU,QAAV,EAAqBC,IAAD,IAAU;AAC5B,UAAIZ,MAAM,GAAGa,cAAc,CAACD,IAAD,CAA3B;AACAX,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAHD;AAIAU,IAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;AAC1BP,MAAAA,OAAO,CAACO,IAAD,CAAP;AACD,KAFD;AAGAF,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7B,UAAIM,cAAc,GAAG,CAClB,GAAEN,IAAK,MADW,EAElB,GAAEA,IAAI,GAAG,CAAE,MAFO,EAGlB,GAAEA,IAAI,GAAG,CAAE,MAHO,EAIlB,GAAEA,IAAI,GAAG,CAAE,MAJO,CAArB;AAMAH,MAAAA,UAAU,CAACS,cAAD,CAAV;AACD,KARD;AASAR,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7B,UAAIO,YAAY,GAAGN,cAAc,CAACD,IAAD,CAAjC;AACA,UAAIQ,aAAa,GAAGP,cAAc,CAACD,IAAD,CAAlC;AACA,UAAIS,YAAY,GAAGR,cAAc,CAACD,IAAD,CAAjC;AACA,UAAIU,gBAAgB,GAAG,CACrBH,YADqB,EAErBE,YAFqB,EAGrBD,aAHqB,EAIrBC,YAJqB,CAAvB;AAMAd,MAAAA,UAAU,CAACe,gBAAD,CAAV;AACD,KAXD;AAYA,WAAO,MAAM;AACXZ,MAAAA,MAAM,CAACa,UAAP;AACD,KAFD;AAGD,GAxCQ,EAwCN,EAxCM,CAAT;AAyCA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,eAAe,EAAEjB,OADD;AAEhBkB,IAAAA,QAAQ,EAAE,yBAFM;AAGhBC,IAAAA,KAAK,EAAE,0BAHS;AAIhBC,IAAAA,WAAW,EAAE;AAJG,GAAlB;AAOA,QAAMC,eAAe,GAAG;AACtBJ,IAAAA,eAAe,EAAE,CACf1B,IAAI,CAAC+B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CADe,EAEfhC,IAAI,CAAC+B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAFe,CADK;AAKtBL,IAAAA,QAAQ,EAAE,yBALY;AAMtBC,IAAAA,KAAK,EAAE,2BANe;AAOtBC,IAAAA,WAAW,EAAE;AAPS,GAAxB;AASA,sBACE,QAAC,mBAAD;AAAA,4BACE,QAAC,oBAAD;AAAA,8BACE;AAAA,+BACE,QAAC,gBAAD;AAAkB,UAAA,EAAE,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,WAAD;AAAA,mBACG1B,GADH,oBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,oBAAD;AAAA,6BACE,QAAC,eAAD;AACE,QAAA,MAAM,EAAEsB,SAAS,CAACC,eADpB;AAEE,QAAA,KAAK,EAAED,SAAS,CAACG,KAFnB;AAGE,QAAA,QAAQ,EAAEH,SAAS,CAACE,QAHtB;AAIE,QAAA,WAAW,EAAEF,SAAS,CAACI,WAJzB;AAKE,QAAA,MAAM,EAAEtB;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF,eAkBE,QAAC,oBAAD;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,MAAM,EAAEuB,eAAe,CAACJ,eAD1B;AAEE,QAAA,KAAK,EAAEI,eAAe,CAACF,KAFzB;AAGE,QAAA,QAAQ,EAAEE,eAAe,CAACH,QAH5B;AAIE,QAAA,WAAW,EAAEG,eAAe,CAACD,WAJ/B;AAKE,QAAA,MAAM,EAAE,CAAC5B,MAAD,EAASI,IAAT;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA/FD;;GAAMN,M;UACSb,O;;;KADTa,M;AAiGN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { io } from \"socket.io-client\";\nimport { FormattedMessage } from \"react-intl\";\nimport { moment } from \"moment\";\nimport {\n  StyledChartContainer,\n  StyledMainContainer,\n  StyledValue,\n} from \"./styled-components\";\nimport BarChart from \"./components/BarChart\";\nimport SystemLineChart from \"./components/SystemLineChart\";\n\nconst connectionOptions = {\n  \"force new connection\": true,\n  reconnectionAttempts: \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n  timeout: 10000, //before connect_error and connect_timeout are emitted.\n  transports: [\"websocket\"],\n};\n\nconst System = () => {\n  const intl = useIntl();\n  const [memory, setMemory] = useState(\"\");\n  const [cpu, setCpu] = useState(\"\");\n  const [disk, setDisk] = useState(\"\");\n  const [network, setNetwork] = useState([]);\n  const [seconds, setSeconds] = useState([]);\n\n  useEffect(() => {\n    const socket = io(\"http://localhost:4000\", connectionOptions);\n    socket.on(\"connection\");\n    socket.on(\"cpu\", (data) => {\n      setCpu(data);\n    });\n    const randomGenrator = (value) => {\n      return value * Math.round(Math.random() * 5);\n    };\n    socket.on(\"memory\", (data) => {\n      let memory = randomGenrator(data);\n      setMemory(memory);\n    });\n    socket.on(\"disk\", (data) => {\n      setDisk(data);\n    });\n    socket.on(\"seconds\", (data) => {\n      let transformArray = [\n        `${data} sec`,\n        `${data + 1} sec`,\n        `${data + 2} sec`,\n        `${data + 3} sec`,\n      ];\n      setSeconds(transformArray);\n    });\n    socket.on(\"network\", (data) => {\n      let networkFirst = randomGenrator(data);\n      let networkSecond = randomGenrator(data);\n      let networkThird = randomGenrator(data);\n      let networkDataArray = [\n        networkFirst,\n        networkThird,\n        networkSecond,\n        networkThird,\n      ];\n      setNetwork(networkDataArray);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const DataUsage = {\n    labelsDataUsage: seconds,\n    barColor: \"rgba(255, 99, 132, 0.2)\",\n    title: \"barChartDatatUsage.title\",\n    borderColor: \"rgba(255, 99, 132, 1)\",\n  };\n\n  const DataMemoryUsage = {\n    labelsDataUsage: [\n      intl.formatMessage({ id: \"barChartMemoryUsage.title\" }),\n      intl.formatMessage({ id: \"barChartDiskUsage.title\" }),\n    ],\n    barColor: \"rgba(54, 162, 235, 0.2)\",\n    title: \"barChartMemoryUsage.title\",\n    borderColor: \"rgba(54, 162, 235, 1)\",\n  };\n  return (\n    <StyledMainContainer>\n      <StyledChartContainer>\n        <h3>\n          <FormattedMessage id={\"barChartCpuUsage.title\"} />\n        </h3>\n        <StyledValue>\n          {cpu} <label>%</label>\n        </StyledValue>\n      </StyledChartContainer>\n      <StyledChartContainer>\n        <SystemLineChart\n          labels={DataUsage.labelsDataUsage}\n          title={DataUsage.title}\n          barColor={DataUsage.barColor}\n          borderColor={DataUsage.borderColor}\n          values={network}\n        />\n      </StyledChartContainer>\n      <StyledChartContainer>\n        <BarChart\n          labels={DataMemoryUsage.labelsDataUsage}\n          title={DataMemoryUsage.title}\n          barColor={DataMemoryUsage.barColor}\n          borderColor={DataMemoryUsage.borderColor}\n          values={[memory, disk]}\n        />\n      </StyledChartContainer>\n    </StyledMainContainer>\n  );\n};\n\nexport default System;\n"]},"metadata":{},"sourceType":"module"}