{"ast":null,"code":"var _jsxFileName = \"/Users/agustinpardo/Desktop/challenge-wispro/client/src/routes/publicRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoute = ({\n  token,\n  component: Component,\n  ...rest\n}) => {\n  const checkAuth = () => {\n    let tokenData = JSON.parse(localStorage.getItem(\"token_data\"));\n    if (tokenData || token) return true;else return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => checkAuth(props) ? /*#__PURE__*/_jsxDEV(Redirect, {\n      from: \"/*\",\n      to: \"/users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PublicRoute;\nexport const mapStateToProps = state => {\n  const {\n    login: {\n      user: {\n        token\n      }\n    }\n  } = state;\n  return {\n    token: token\n  };\n};\nexport default connect(mapStateToProps, null)(PublicRoute);\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/routes/publicRoute.js"],"names":["React","Route","Redirect","connect","PublicRoute","token","component","Component","rest","checkAuth","tokenData","JSON","parse","localStorage","getItem","props","mapStateToProps","state","login","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,SAAS,EAAEC,SAApB;AAA+B,KAAGC;AAAlC,CAAD,KAA8C;AAChE,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAhB;AAEA,QAAIJ,SAAS,IAAIL,KAAjB,EAAwB,OAAO,IAAP,CAAxB,KACK,OAAO,KAAP;AACN,GALD;;AAOA,sBACE,QAAC,KAAD,OACMG,IADN;AAEE,IAAA,MAAM,EAAGO,KAAD,IACNN,SAAS,CAACM,KAAD,CAAT,gBACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAC,IAAf;AAAoB,MAAA,EAAE,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,gBAGE,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AANN;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApBD;;KAAMX,W;AAqBN,OAAO,MAAMY,eAAe,GAAIC,KAAD,IAAW;AACxC,QAAM;AACJC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AAAEd,QAAAA;AAAF;AADD;AADH,MAIFY,KAJJ;AAKA,SAAO;AACLZ,IAAAA,KAAK,EAAEA;AADF,GAAP;AAGD,CATM;AAWP,eAAeF,OAAO,CAACa,eAAD,EAAkB,IAAlB,CAAP,CAA+BZ,WAA/B,CAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst PublicRoute = ({ token, component: Component, ...rest }) => {\n  const checkAuth = () => {\n    let tokenData = JSON.parse(localStorage.getItem(\"token_data\"));\n\n    if (tokenData || token) return true;\n    else return false;\n  };\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        checkAuth(props) ? (\n          <Redirect from=\"/*\" to=\"/users\" />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  );\n};\nexport const mapStateToProps = (state) => {\n  const {\n    login: {\n      user: { token },\n    },\n  } = state;\n  return {\n    token: token,\n  };\n};\n\nexport default connect(mapStateToProps, null)(PublicRoute);\n"]},"metadata":{},"sourceType":"module"}