{"ast":null,"code":"import { validateYupSchema, withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../../../constants\";\nimport EditUserForm from \"./component/Form\";\nimport { useIntl } from \"react-intl\";\n\nconst validationSchema = intl => {\n  yup.object().shape({\n    email: yup.string().trim().matches(REGEX.EMAIL_REGEX_SCHEMA, intl.formatMessage({\n      id: \"userEdition.emailError\"\n    })).max(30).required(\" \"),\n    name: yup.string().trim().matches(REGEX.NAME_REGEX, \"userEdition.nameError\").required(\"userEdition.nameRequired\"),\n    surname: yup.string().trim().matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\").required(\"userEdition.surnameRequired\"),\n    address: yup.string().trim().required(\"userEdition.addressRequired\"),\n    dni: yup.number() // .trim()\n    // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n    // .required(\"userEdition.dniRequired\"),\n\n  });\n}; //formik validations\n\n\nconst EditUser = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema: data => yup.object().shape({\n    email: yup.string().trim().matches(REGEX.EMAIL_REGEX_SCHEMA, data.intl.formatMessage({\n      id: \"userEdition.errorEmail\"\n    })).max(30).required(\" \"),\n    name: yup.string().trim().matches(REGEX.NAME_REGEX, \"Error en campo\").required(\"userEdition.nameRequired\"),\n    surname: yup.string().trim().matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\").required(\"userEdition.surnameRequired\"),\n    address: yup.string().trim().required(\"userEdition.addressRequired\"),\n    dni: yup.number() // .trim()\n    // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n    // .required(\"userEdition.dniRequired\"),\n\n  }),\n  mapPropsToValues: ({\n    data\n  }) => ({\n    email: data.email || \"\",\n    name: data.name || \"\",\n    surname: data.surname || \"\",\n    address: data.address || \"\",\n    dni: data.dni || \"\"\n  }),\n  handleSubmit: (value, {\n    props,\n    setErrors\n  }) => {\n    const {\n      data: {\n        dni\n      }\n    } = props;\n    props.handleAsyncConfirm(dni, value).then(res => {\n      props.posResponse();\n      props.onClose({\n        type: \"hide\"\n      });\n    });\n  }\n})(EditUserForm);\nexport default EditUser;","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/Users/screens/EditUser/index.jsx"],"names":["validateYupSchema","withFormik","yup","REGEX","EditUserForm","useIntl","validationSchema","intl","object","shape","email","string","trim","matches","EMAIL_REGEX_SCHEMA","formatMessage","id","max","required","name","NAME_REGEX","surname","SURNAME_REGEX","address","dni","number","EditUser","validateOnChange","enableReinitialize","data","mapPropsToValues","handleSubmit","value","props","setErrors","handleAsyncConfirm","then","res","posResponse","onClose","type"],"mappings":"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","sourcesContent":["import { validateYupSchema, withFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { REGEX } from \"../../../../constants\";\nimport EditUserForm from \"./component/Form\";\nimport { useIntl } from \"react-intl\";\nconst validationSchema = (intl) => {\n  yup.object().shape({\n    email: yup\n      .string()\n      .trim()\n      .matches(\n        REGEX.EMAIL_REGEX_SCHEMA,\n        intl.formatMessage({ id: \"userEdition.emailError\" })\n      )\n      .max(30)\n      .required(\" \"),\n    name: yup\n      .string()\n      .trim()\n      .matches(REGEX.NAME_REGEX, \"userEdition.nameError\")\n      .required(\"userEdition.nameRequired\"),\n    surname: yup\n      .string()\n      .trim()\n      .matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\")\n      .required(\"userEdition.surnameRequired\"),\n    address: yup.string().trim().required(\"userEdition.addressRequired\"),\n    dni: yup.number(),\n    // .trim()\n    // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n    // .required(\"userEdition.dniRequired\"),\n  });\n};\n//formik validations\nconst EditUser = withFormik({\n  validateOnChange: true,\n  enableReinitialize: false,\n  validationSchema: ((data)=>\n    yup.object().shape({\n      email: yup\n        .string()\n        .trim()\n        .matches(REGEX.EMAIL_REGEX_SCHEMA, data.intl.formatMessage({ id: \"userEdition.errorEmail\" }))\n        .max(30)\n        .required(\" \"),\n      name: yup\n        .string()\n        .trim()\n        .matches(REGEX.NAME_REGEX, \"Error en campo\")\n        .required(\"userEdition.nameRequired\"),\n      surname: yup\n        .string()\n        .trim()\n        .matches(REGEX.SURNAME_REGEX, \"userEdition.surnameError\")\n        .required(\"userEdition.surnameRequired\"),\n      address: yup.string().trim().required(\"userEdition.addressRequired\"),\n      dni: yup.number(),\n      // .trim()\n      // .matches(REGEX.DNI_REGEX, \"userEdition.dniError\")\n      // .required(\"userEdition.dniRequired\"),\n    })\n  ),\n  mapPropsToValues: ({ data }) => ({\n    email: data.email || \"\",\n    name: data.name || \"\",\n    surname: data.surname || \"\",\n    address: data.address || \"\",\n    dni: data.dni || \"\",\n  }),\n  handleSubmit: (value, { props, setErrors }) => {\n    const {\n      data: { dni },\n    } = props;\n    props.handleAsyncConfirm(dni, value).then((res) => {\n      props.posResponse();\n      props.onClose({ type: \"hide\" });\n    });\n  },\n})(EditUserForm);\n\nexport default EditUser;\n"]},"metadata":{},"sourceType":"module"}