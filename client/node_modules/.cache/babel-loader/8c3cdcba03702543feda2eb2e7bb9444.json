{"ast":null,"code":"var _jsxFileName = \"/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/System/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { io } from \"socket.io-client\";\nimport { StyledChartContainer, StyledMainContainer } from \"./styled-components\";\nimport BarChart from \"./components/BarChart\";\nimport SystemLineChart from \"./components/SystemLineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar connectionOptions = {\n  \"force new connection\": true,\n  reconnectionAttempts: \"Infinity\",\n  //avoid having user reconnect manually in order to prevent dead clients after a server restart\n  timeout: 10000,\n  //before connect_error and connect_timeout are emitted.\n  transports: [\"websocket\"]\n};\n\nconst System = () => {\n  _s();\n\n  const intl = useIntl();\n  const [memory, setMemory] = useState(\"\");\n  const [cpu, setCpu] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [seconds, setSeconds] = useState([]);\n  useEffect(() => {\n    const socket = io(\"http://localhost:4000\", connectionOptions);\n    socket.on(\"connection\");\n    socket.on(\"cpu\", data => {\n      setCpu(data);\n    });\n    socket.on(\"memory\", data => {\n      setMemory(data);\n    });\n    socket.on(\"seconds\", data => {\n      setSeconds([...seconds, data]);\n\n      if (seconds.length >= 10) {\n        setSeconds([]);\n      }\n    });\n    socket.on(\"network\", data => {\n      setNetwork(data);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const DataUsage = {\n    // labelsDataUsage: seconds,\n    barColor: \"rgba(255, 99, 132, 0.2)\",\n    title: \"barChartDatatUsage.title\",\n    borderColor: \"rgba(255, 99, 132, 1)\"\n  };\n  const DataCpuUsage = {\n    labelsDataUsage: [1, 2, 3, 4, 5, 6, 7],\n    // [\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    // ],\n    barColor: \"rgba(255, 206, 86, 0.2)\",\n    title: \"barChartCpuUsage.title\",\n    borderColor: \"rgba(255, 206, 86, 1)\"\n  };\n  const DataMemoryUsage = {\n    // labelsDataUsage: seconds,\n    // [\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    // ],\n    barColor: \"rgba(54, 162, 235, 0.2)\",\n    title: \"barChartMemoryUsage.title\",\n    borderColor: \"rgba(54, 162, 235, 1)\"\n  };\n  return /*#__PURE__*/_jsxDEV(StyledMainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(StyledChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Cpu usage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: cpu / 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(System, \"19aXwPF41ipsFIPQM8jc7EQFi4c=\", false, function () {\n  return [useIntl];\n});\n\n_c = System;\nexport default System;\n\nvar _c;\n\n$RefreshReg$(_c, \"System\");","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/views/System/index.jsx"],"names":["React","useEffect","useState","useIntl","io","StyledChartContainer","StyledMainContainer","BarChart","SystemLineChart","connectionOptions","reconnectionAttempts","timeout","transports","System","intl","memory","setMemory","cpu","setCpu","network","setNetwork","seconds","setSeconds","socket","on","data","length","disconnect","DataUsage","barColor","title","borderColor","DataCpuUsage","labelsDataUsage","DataMemoryUsage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { io } from \"socket.io-client\";\n\nimport { StyledChartContainer, StyledMainContainer } from \"./styled-components\";\nimport BarChart from \"./components/BarChart\";\nimport SystemLineChart from \"./components/SystemLineChart\";\n\nvar connectionOptions = {\n  \"force new connection\": true,\n  reconnectionAttempts: \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n  timeout: 10000, //before connect_error and connect_timeout are emitted.\n  transports: [\"websocket\"],\n};\n\nconst System = () => {\n  const intl = useIntl();\n  const [memory, setMemory] = useState(\"\");\n  const [cpu, setCpu] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [seconds, setSeconds] = useState([]);\n\n  useEffect(() => {\n    const socket = io(\"http://localhost:4000\", connectionOptions);\n    socket.on(\"connection\");\n    socket.on(\"cpu\", (data) => {\n      setCpu(data);\n    });\n    socket.on(\"memory\", (data) => {\n      setMemory(data);\n    });\n    socket.on(\"seconds\", (data) => {\n      setSeconds([...seconds, data]);\n      if (seconds.length >= 10) {\n        setSeconds([]);\n      }\n    });\n    socket.on(\"network\", (data) => {\n      setNetwork(data);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const DataUsage = {\n    // labelsDataUsage: seconds,\n    barColor: \"rgba(255, 99, 132, 0.2)\",\n    title: \"barChartDatatUsage.title\",\n    borderColor: \"rgba(255, 99, 132, 1)\",\n  };\n  const DataCpuUsage = {\n    labelsDataUsage: [1, 2, 3, 4, 5, 6, 7],\n    // [\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    // ],\n    barColor: \"rgba(255, 206, 86, 0.2)\",\n    title: \"barChartCpuUsage.title\",\n    borderColor: \"rgba(255, 206, 86, 1)\",\n  };\n  const DataMemoryUsage = {\n    // labelsDataUsage: seconds,\n    // [\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.hourAgo\" }),\n    //   intl.formatMessage({ id: \"barChartSystemUsage.now\" }),\n    // ],\n    barColor: \"rgba(54, 162, 235, 0.2)\",\n    title: \"barChartMemoryUsage.title\",\n    borderColor: \"rgba(54, 162, 235, 1)\",\n  };\n  return (\n    <StyledMainContainer>\n      <StyledChartContainer>\n        <h4>Cpu usage</h4>\n        <span>{cpu / 100}</span>\n        {/* <BarChart\n          labels={DataUsage.labelsDataUsage}\n          title={DataUsage.title}\n          barColor={DataUsage.barColor}\n          borderColor={DataUsage.borderColor}\n          values={[2, network]}\n        /> */}\n      </StyledChartContainer>\n      <StyledChartContainer>\n        {/* <SystemLineChart\n          labels={DataCpuUsage.labelsDataUsage}\n          title={DataCpuUsage.title}\n          barColor={DataCpuUsage.barColor}\n          borderColor={DataCpuUsage.borderColor}\n          values={[2,3,4,5,6,4]}\n        /> */}\n      </StyledChartContainer>\n      <StyledChartContainer>\n        {/* <BarChart\n          labels={DataMemoryUsage.labelsDataUsage}\n          title={DataMemoryUsage.title}\n          barColor={DataMemoryUsage.barColor}\n          borderColor={DataMemoryUsage.borderColor}\n          values={[memory]}\n        /> */}\n      </StyledChartContainer>\n    </StyledMainContainer>\n  );\n};\n\nexport default System;\n"]},"metadata":{},"sourceType":"module"}