{"ast":null,"code":"import { successMessages, failureMessages } from \"./messages\";\nimport { showNotification } from \"../actions/notificationActions/index\"; //middleware to intercept the request status (succesfull or failed) and trigger a toast notificacion\n\nconst toastMiddleware = state => next => action => {\n  const {\n    type\n  } = action;\n\n  if (type.match(\"SUCCESS\")) {\n    if (successMessages[type]) {\n      state.dispatch(showNotification(successMessages[type], \"success\"));\n    }\n  } else if (type.match(\"FAILURE\")) {\n    if (failureMessages[type]) {\n      state.dispatch(showNotification(failureMessages[type], \"failure\"));\n    } else if (failureMessages[type]) {\n      state.dispatch(showNotification(failureMessages[type].default, \"failure\"));\n    }\n  }\n\n  return next(action);\n};\n\nexport default toastMiddleware;","map":{"version":3,"sources":["/Users/agustinpardo/Desktop/challenge-wispro/client/src/store/middlewares/toastNotification.jsx"],"names":["successMessages","failureMessages","showNotification","toastMiddleware","state","next","action","type","match","dispatch","default"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,YAAjD;AACA,SAASC,gBAAT,QAAiC,sCAAjC,C,CAEA;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;;AACA,MAAIC,IAAI,CAACC,KAAL,CAAW,SAAX,CAAJ,EAA2B;AACzB,QAAIR,eAAe,CAACO,IAAD,CAAnB,EAA2B;AACzBH,MAAAA,KAAK,CAACK,QAAN,CAAeP,gBAAgB,CAACF,eAAe,CAACO,IAAD,CAAhB,EAAwB,SAAxB,CAA/B;AACD;AACF,GAJD,MAIO,IAAIA,IAAI,CAACC,KAAL,CAAW,SAAX,CAAJ,EAA2B;AAChC,QAAIP,eAAe,CAACM,IAAD,CAAnB,EAA2B;AACzBH,MAAAA,KAAK,CAACK,QAAN,CAAeP,gBAAgB,CAACD,eAAe,CAACM,IAAD,CAAhB,EAAwB,SAAxB,CAA/B;AACD,KAFD,MAEO,IAAIN,eAAe,CAACM,IAAD,CAAnB,EAA2B;AAChCH,MAAAA,KAAK,CAACK,QAAN,CACEP,gBAAgB,CAACD,eAAe,CAACM,IAAD,CAAf,CAAsBG,OAAvB,EAAgC,SAAhC,CADlB;AAGD;AACF;;AAED,SAAOL,IAAI,CAACC,MAAD,CAAX;AACD,CAjBD;;AAmBA,eAAeH,eAAf","sourcesContent":["import { successMessages, failureMessages } from \"./messages\";\nimport { showNotification } from \"../actions/notificationActions/index\";\n\n//middleware to intercept the request status (succesfull or failed) and trigger a toast notificacion\nconst toastMiddleware = (state) => (next) => (action) => {\n  const { type } = action;\n  if (type.match(\"SUCCESS\")) {\n    if (successMessages[type]) {\n      state.dispatch(showNotification(successMessages[type], \"success\"));\n    }\n  } else if (type.match(\"FAILURE\")) {\n    if (failureMessages[type]) {\n      state.dispatch(showNotification(failureMessages[type], \"failure\"));\n    } else if (failureMessages[type]) {\n      state.dispatch(\n        showNotification(failureMessages[type].default, \"failure\")\n      );\n    }\n  }\n\n  return next(action);\n};\n\nexport default toastMiddleware;\n"]},"metadata":{},"sourceType":"module"}